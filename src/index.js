// Generated by CoffeeScript 1.8.0
(function() {
  var SPEC, app, create_html, express, file_or_url_to_absolute, fs, launch_webapp, launch_webapp_once, path, pkg, program, raml_parser, request, spawn, starts_with, webapp_is_listening;

  express = require('express');

  path = require('path');

  program = require('commander');

  spawn = require('child_process').spawn;

  request = require('request');

  pkg = require(path.resolve(__dirname, '../package.json'));

  fs = require('fs');

  raml_parser = require('raml-parser');

  app = express();

  SPEC = '';

  starts_with = function(str, search) {
    return 0 === str.indexOf(search);
  };

  file_or_url_to_absolute = function(file) {
    if (starts_with(file, 'http:') || starts_with(file, 'https:')) {
      return file;
    } else {
      return path.resolve(process.cwd(), file);
    }
  };

  create_html = function(raml_url) {
    return "</html>\n<head>\n  <link rel=\"stylesheet\" href=\"/api-console/styles/api-console-light-theme.css\" type=\"text/css\" />\n</head>\n<body ng-app=\"ramlConsoleApp\" ng-cloak>\n  <script src=\"/api-console/scripts/api-console-vendor.js\"></script>\n  <script type=\"text/javascript\" src=\"/api-console/scripts/api-console.js\"></script>\n  <script type=\"text/javascript\">\n    $.noConflict();\n  </script>\n\n  <div style=\"overflow: auto; position: relative\">\n    <raml-console src=\"" + raml_url + "\" />\n  </div>\n</body>\n</html>";
  };

  launch_webapp = function(port, cb) {
    app.get('/', function(req, res) {
      var html;
      html = create_html(SPEC);
      return res.send(html);
    });
    app.use('/api-console', express["static"](path.resolve(__dirname, '../api-console/dist')));
    app.use('/api-designer', express["static"](path.resolve(__dirname, '../api-designer/dist')));
    app.get('/~raml-is', function(req, res) {
      return res.send('awesome');
    });
    app.use('/', express["static"]('/'));
    return app.listen(port, cb);
  };

  webapp_is_listening = function(port, cb) {
    return request("http://localhost:" + port + "/~raml-is", function(e, r, b) {
      return cb(null, b === 'awesome');
    });
  };

  launch_webapp_once = function(port, cb) {
    return webapp_is_listening(port, function(e, r) {
      if (r) {
        return cb();
      } else {
        return launch_webapp(port, cb);
      }
    });
  };

  program.version(pkg.version);

  program.command('console <file>').description('Run a console for the given specification file. The file can be a relative path or URL.').option('-p, --port <number>', 'Port to run on', 10500).action(function(spec, options) {
    return launch_webapp_once(options.port, function() {
      SPEC = file_or_url_to_absolute(spec);
      return spawn('open', ["http://localhost:" + options.port + "/"]);
    });
  });

  program.command('validate <file>').description('Validate the RAML. The file can be either a relative path or URL.').action(function(spec, options) {
    var file, nok, ok, ramljsonexpander;
    file = file_or_url_to_absolute(spec);
    ramljsonexpander = require('raml-jsonschema-expander');
    nok = function(err) {
      return console.error(JSON.stringify(err, null, 2));
    };
    ok = function(node) {
      return console.log("Successfully parsed RAML");
    };
    return raml_parser.composeFile(file).then(ok, nok);
  });

  program.parse(process.argv);

  if (process.argv.slice(2).length === 0) {
    program.outputHelp(function(txt) {
      return txt;
    });
  }

}).call(this);
